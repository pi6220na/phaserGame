<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Phaser - Making your first game, part 1</title>
    <script src="../javascripts/phaser.min.js"></script>
    <style type="text/css">
        body {
            margin: 0;
        }
    </style>
</head>
<body>


<script>

    window.onload = function() {

        // variables that will hold objects
        var head, tail, cursors, snake, apple, gameText, snakeDirection;
        var directions = Object.freeze({up: 0, down: 1, right: 2, left: 3});


        // configuration variables and starting values
        var canvasWidth = 832, canvasHeight = 640;
        var playerSize = 64;
        var x = 128, y = 0;
        var frameCounter = 0;
        var gameSpeed = 20;
        var score = 0;




        // basic phaser preload/create/update functions

        var game = new Phaser.Game(canvasWidth, canvasHeight, Phaser.AUTO, '', { preload: preload, create: create, update: update });

        function preload() {
            game.load.image('elephant', 'assets/elephant.png');
            game.load.image('apple', 'assets/apple.png');
            game.load.spritesheet('dude', 'assets/dude.png', 32, 48);
        }

        function create() {

            //  We're going to be using physics, so enable the Arcade Physics system
            game.physics.startSystem(Phaser.Physics.ARCADE);

            // The player and its settings
            snake = game.add.sprite(32, game.world.height - 150, 'dude');

            //  We need to enable physics on the player
            game.physics.arcade.enable(snake);

            //  Player physics properties. Give the little guy a slight bounce.
            /*
            snake.body.bounce.y = 0.0; // was 0.2
            snake.body.gravity.y = 0; // was 300

            snake.body.bounce.x = 0.0; // was 0.2
            snake.body.gravity.x = 0; // was 300
            */

            snake.body.collideWorldBounds = true;

            snake.body.allowGravity = false;



            //  Our two animations, walking left and right.
            snake.animations.add('left', [0,1,2,3], 10, true);
            snake.animations.add('right',[0,1,2,3], 10, true);
            snake.animations.add('up',[0,1,2,3], 10, true);
            snake.animations.add('down',[0,1,2,3], 10, true);

            gameText = game.add.text(canvasWidth, 0, "0", {
                font: "28px Arial",
                fill: "#fff"
            });
            gameText.anchor.setTo(1, 0);
            //initSnake();
            //placeRandomApple();

            cursors = game.input.keyboard.createCursorKeys();




            // Create 5 followers, each one following the one ahead of it
            // The first one will follow the mouse pointer
            var NUMBER_OF_FOLLOWERS = 10;

            for(var i = 0; i < NUMBER_OF_FOLLOWERS; i++) {
                var f = this.game.add.existing(
                        new Follower(this.game,
                                this.game.width/2 + i * 32,
                                this.game.height/2,
                                f || snake    // this.game.input /* the previous follower or pointer */


                        )
                //var distance = this.game.math.distance(this.x, this.y, this.target.x, this.target.y);

            );
                if (f) {
                    console.log('f');
                }
                if (this.game.input) {
                    console.log('game.input');
                }
                console.log(f || snake)
            }

// Simulate a pointer click/tap input at the center of the stage
            // when the example begins running.
            this.game.input.x = this.game.width/2;
            this.game.input.y = this.game.height/2;

/*
            for (item in game.world.game) {
                console.log('item = ' + item + ' game item = ' + game.world.game[item]);
                if (game.world.game[item].isObject) {
                    for (getIt in game.world.game) {
                        console.log('inner getIt = ' + getIt + ' inner object = ' + game.world.game[getIt]);
                    }
                }
            }
*/



        }

        function update() {
            gameText.text = score;
            updateDirection();
            frameCounter++;


            /*
            if (frameCounter === gameSpeed) {
                // movePlayer();
                if (playerCollidesWithSelf()) {
                    alert("The game is over! Your score was: " + score);
                    deleteSnake();
                    initSnake();
                    score = 0;
                    gameSpeed = 20;
                    playerDirection = undefined;
                    x = 128;
                    y = 0;
                    gameText.text = "";
                }
                if (appleCollidesWithSnake()) {
                    score++;
                    apple.destroy();
                    placeRandomApple();
                    gameSpeed--;
                    if (gameSpeed <= 5) gameSpeed = 5;
                } else if (playerDirection !== undefined) {
                    removeTail();
                }
                frameCounter = 0;
            }
            */

        }

        // helper functions



// Follower constructor
        var Follower = function(game, x, y, target) {
            Phaser.Sprite.call(this, game, x, y, 'dude');

            // Save the target that this Follower will follow
            // The target is any object with x and y properties
            this.target = target;

            // Set the pivot point for this sprite to the center
            this.anchor.setTo(0.5, 0.5);

            // Enable physics on this object
            this.game.physics.enable(this, Phaser.Physics.ARCADE);

            // Define constants that affect motion
            this.MAX_SPEED = 250; // pixels/second
            this.MIN_DISTANCE = 32; // pixels
        };

// Followers are a type of Phaser.Sprite
        Follower.prototype = Object.create(Phaser.Sprite.prototype);
        Follower.prototype.constructor = Follower;

        Follower.prototype.update = function() {
            // Calculate distance to target
            var distance = this.game.math.distance(this.x, this.y, this.target.x, this.target.y);

            // If the distance > MIN_DISTANCE then move
            if (distance > this.MIN_DISTANCE) {
                // Calculate the angle to the target
                var rotation = this.game.math.angleBetween(this.x, this.y, this.target.x, this.target.y);
                //console.log('x = ' + this.x + ' y = ' + this.y + ' target.x = ' + this.target.x + ' target.y = ' + this.target.y
                //);

                // Calculate velocity vector based on rotation and this.MAX_SPEED
                this.body.velocity.x = Math.cos(rotation) * this.MAX_SPEED;
                this.body.velocity.y = Math.sin(rotation) * this.MAX_SPEED;
            } else {
                this.body.velocity.setTo(0, 0);
            }
        };






        function initSnake() {
            snake = new Object();
            //head = new snake();
            //head = new Object();
            newHead(0, 0);
            tail = head;
            newHead(64, 0);
            newHead(128, 0);

        }

        function deleteSnake() {
            while (tail !== null) {
                tail.image.destroy();
                tail = tail.next;
            }
            head = null;
        }

        function placeRandomApple() {
            if (apple !== undefined) apple.destroy();
            apple = game.add.image(0, 0, 'dude');
            do {
                apple.position.x = Math.floor(Math.random() * 13) * 64;
                apple.position.y = Math.floor(Math.random() * 10) * 64;
            } while (appleCollidesWithSnake());
        }

        // linked list functions

        function newHead(x, y) {
            newHead = new snake();
            //newHead = new snake();
            //var newHead = new Object();
            newHead.image = game.add.image(x, y, 'dude');
            newHead.next = null;
            head.next = newHead;
            head = newHead;
        }

        function removeTail(x, y) {
            tail.image.destroy();
            tail = tail.next;
        }

        // collision functions

        function appleCollidesWithSnake() {
            // traverse the linked list, starting at the tail
            var needle = tail;
            var collides = false;
            var numTimes = 0;
            while (needle !== null) {
                numTimes++;
                if (apple.position.x === needle.image.position.x &&
                        apple.position.y === needle.image.position.y) {
                    collides = true;
                }
                needle = needle.next;
            }
            return collides;
        }

        function playerCollidesWithSelf() {
            // check if the head has collided with any other body part, starting at the tail
            var needle = tail;
            var collides = false;
            while (needle.next !== head) {
                if (needle.image.position.x === head.image.position.x &&
                        needle.image.position.y === head.image.position.y) {
                    collides = true;
                }
                needle = needle.next;
            }
            return collides;
        }


        function updateDirection() {

            //  Reset the players velocity (movement)
            snake.body.velocity.x = 0;
            snake.body.velocity.y = 0;


            //if (cursors.right.isDown && snakeDirection !== directions.left) {
            if (cursors.right.isDown) {

                    //snake.animations.stop();
                    snake.frame = 4;
                    snake.body.velocity.x = 150;
                    snake.animations.play('right', 30, true)
            }
            else
            //if (cursors.left.isDown && snakeDirection !== directions.right) {
            if (cursors.left.isDown) {

                //snake.animations.stop();
                snake.frame = 4;
                snake.body.velocity.x = -150;
                snake.animations.play('left', 30, true);

            } else
            //if (cursors.up.isDown && snakeDirection !== directions.down) {
            if (cursors.up.isDown) {

                //snake.animations.stop();
                snake.frame = 4;
                snake.body.velocity.y = -150;
                snake.animations.play('up', 30, true);
            } else
            //if (cursors.down.isDown && snakeDirection !== directions.up) {
            if (cursors.down.isDown) {

                //snake.animations.stop();
                snake.frame = 4;
                snake.body.velocity.y = 150;
                snake.animations.play('down', 30, true);
            }
            //else {
                //  Stand still
                snake.animations.stop();

                snake.frame = 0;
            //}
        }

        function movesnake() {
            if (playerDirection === directions.right) {
                x += playerSize;
            } else if (snakeDirection === directions.left) {
                x -= playerSize;
            } else if (snakeDirection === directions.up) {
                y -= playerSize;
            } else if (snakeDirection === directions.down) {
                y += playerSize;
            }
            if (x <= 0 - playerSize) {
                x = canvasWidth - playerSize;
            } else if (x >= canvasWidth) {
                x = 0;
            } else if (y <= 0 - playerSize) {
                y = canvasHeight - playerSize;
            } else if (y >= canvasHeight) {
                y = 0;
            }
            if (snakeDirection !== undefined) {
                newHead(x, y);
            }
        }

    };
</script>
</body>